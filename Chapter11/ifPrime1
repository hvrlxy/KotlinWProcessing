allocate-registers n one zero loop ifPrime ifNotPrime a comparison remainder first-loop stop end val

read n 

li one 1
li zero 0

li stop stopL
li loop loopL
li ifPrime ifPrimeL
li ifNotPrime ifNotPrimeL
li end endL
li first-loop first-loopL

first-loopL:
	li a 0
	sub n n one
	sgt comparison n one
	jeqz comparison stop

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	add a a n

loopL:
	sub a a one
	sgt comparison a one
	jeqz comparison ifPrime
	rem remainder n a
	sne comparison remainder zero
	jeqz comparison ifNotPrime
	j loop

ifPrimeL:
	li val 1
	j end	

ifNotPrimeL:
	li val 0
	j end

endL:
	jeqz val first-loop
	write n
	j first-loop

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
stopL:
	halt